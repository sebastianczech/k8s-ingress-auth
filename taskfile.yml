version: '3'

tasks:
  docker-clean:
    cmds:
      - docker image prune --all --force
      - docker system prune --all --force

  docker-debug:
    cmds:
      - docker exec -it home-lab-control-plane bash

  cluster-create:
    cmds:
      - kind create cluster --config single-node-extra-port-mapping.yaml --name home-lab
    dir: code

  cluster-status:
    cmds:
      - kind get clusters
      - kubectl get nodes -o wide
    dir: code

  cluster-delete:
    cmds:
      - kind delete cluster --name home-lab
    dir: code

  cluster-ingress-setup:
    cmds:
      - kubectl apply -f ingress-nginx.yaml
      - openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"
      - kubectl -n ingress-nginx create secret tls tls-secret --key tls.key --cert tls.crt || true
      - "kubectl wait --namespace ingress-nginx \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/component=controller \
        --timeout=90s"
      - kubectl -n ingress-nginx get services
    dir: code

  dashboard-ingress-setup:
    cmds:
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      - helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard
      - kubectl apply -f admin-user.yaml
      - kubectl -n kubernetes-dashboard create token admin-user
      - "kubectl wait --namespace kubernetes-dashboard \
        --for=condition=ready pod \
        --selector=app=kubernetes-dashboard-kong \
        --timeout=90s"
      - kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443
    dir: code

  oauth-proxy-setup:
    cmds:
      - "kubectl create secret generic oauth2-proxy-id \
        --from-file=OAUTH2_PROXY_CLIENT_ID=./oauth_id.txt \
        -n kube-system || true"
      - "kubectl create secret generic oauth2-proxy-secret \
        --from-file=OAUTH2_PROXY_CLIENT_SECRET=./oauth_secret.txt \
        -n kube-system || true"
      - openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=podinfo.example.com/O=podinfo"
      - kubectl -n kube-system create secret tls tls-secret --key tls.key --cert tls.crt || true
      - kubectl apply -f oauth-proxy.yaml
    dir: code

  oauth-proxy-check:
    cmds:
      - kubectl -n kube-system get secret oauth2-proxy-id -o jsonpath='{.data.OAUTH2_PROXY_CLIENT_ID}' | base64 --decode
      - kubectl -n kube-system get secret oauth2-proxy-secret -o jsonpath='{.data.OAUTH2_PROXY_CLIENT_SECRET}' | base64 --decode

  basic-auth-setup:
    cmds:
      - htpasswd -c basic_auth.htpasswd podtato
      - kubectl create namespace podtato || true
      - kubectl -n podtato delete secret basic-auth || true
      - kubectl -n podtato create secret generic basic-auth --from-file=auth=basic_auth.htpasswd || true
    dir: code

  cert-auth-setup:
    cmds:
      - openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 356 -nodes -subj '/CN=foobar.example.com'
      - openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj '/CN=foobar.example.com'
      - openssl x509 -req -sha256 -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt
      - openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj '/CN=foobar.example.com'
      - openssl x509 -req -sha256 -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt
      - kubectl create secret generic ca-secret --from-file=ca.crt=ca.crt || true
      - kubectl create secret generic tls-secret --from-file=tls.crt=server.crt --from-file=tls.key=server.key || true
    dir: code

  app-foo-bar-setup:
    cmds:
      - kubectl apply -f app-foo-bar.yaml
    dir: code

  app-foo-bar-check:
    cmds:
      - "curl -k --cert client.crt --key client.key https://foobar.example.com/foo"
      - "curl -k --cert client.crt --key client.key https://foobar.example.com/bar"
      # - "curl -H 'Host: foobar.example.com' localhost/foo"
      # - "curl -H 'Host: foobar.example.com' localhost/bar"
    dir: code

  app-podtato-setup:
    cmds:
      - kubectl apply -f app-podtato.yaml
    dir: code

  app-podtato-check:
    cmds:
      - "curl -kv https://podtato.example.com -u 'podtato:***'"
      # - "curl -H 'Host: podtato.example.com' localhost"

  app-podinfo-setup:
    cmds:
      - kubectl apply -f app-podinfo.yaml
    dir: code

  app-podinfo-check:
    cmds:
      # https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps
      - "curl -kiv https://podinfo.example.com"
      # - "curl -H 'podinfo.example.com' localhost"

  k9s:
    cmds:
      - k9s
